Now the next thing it tells us if you
when you're reading this stuff here
is, it says, if I can highlight this--
it says, column four has mixed types.
What that means is that when Pandas is reading a CSV file
or reading data from anywhere, it
tries to guess the type of that column.
When it says mixed types, then what it means
is that it's unable to figure out what the exact type is,
and it would be in danger.
Some would be strings, and it's not a single uniform type,
which is not so good for us.
Because remember, if we want to do analysis,
we want to use an Np array kind of structure,
which means that we want our data to be of the same type
in a particular column .
So let's see what the mix type stuff has
to do with what's going on with the mix types in incidence zip.
Column four is incidence zip.
That's one of the mixed types.
And the best way to do that is to use this function
called unique.
What unique does is it pulls out unique values in a column.
So we get this unique stuff here, and we look at it.
And we find that there's a NAN over here.
Then we have zip set strings, many zip set strings.
And let's scroll down further.
We find that sometimes in the United States
all ZIPs are five digits.
But sometimes we find that there's
five digits followed by a dash followed by a four digit
number.
So that's another problem when this says something
because the postal service uses these extra four
digits for more precise identification of locations.
So that shows up in some places, I guess,
if the person providing the complaint has provided it.
Then we have a zip unknown, which is not very helpful.
We can scroll down further and we look and see
there all strings here.
If you had some strings, though they are strings,
some strings have a decimal point in them.
So we've got to get rid of that because zips
don't have decimal points.
Then we find that in some places,
it actually identifies them as floating point numbers.
So we've got a mixed data type coming from this stuff
here that sometimes they are strings.
Sometimes they're floating point numbers.
And you'll notice here the question mark here
that we need to get rid of as well.
We scroll further down and see all the same problems
and then there's the JFK.
So we've got a mix of stuff here.
And roughly what we're saying is that sometimes a zip is a float
and other times it's an STR.
Sometimes zip codes are representing
a float and especially the ones that start with a zero
are missing the first digit.
So we look at this one for example.
This is a four digit zip, which is not correct.
It's a five digit zip.
And the reason it's a four digit zip
is because it's representative of the floating point number.
And the zero that came in front was just
vanished because floating point numbers
don't have zeros in front.
So that's the though..
When reading it came into the string
but somewhere on the way, it got entered as a number.
The reason for this probably is the way
it was entered in the database.
Maybe there are multiple entry points,
maybe It's entered on the web, it's
entered on an application at the 311 person's desk,
it's entered later somewhere, or on a file directly.
I don't really know.
But there's probably multiple ways
in which the data is entered.
And we've seen that this data is messy because of those reasons.
And we have to clean up that mess because we
have to deal with this data.
So we have this.
We have the zero missing.
We have the four digit extension.
We have somewhere in this stuff, I saw, there was a zip code 0.
Let's assume it's there.
And what the heck is that?
A zero zip code?
And then we have NANs, and there's a question mark,
there's an unknown, there's a JFK,
there's some random stuff sitting inside,
and we got to figure out what to do with those as well.
So what we need to do is we need to clean the data.
Cleaning the data is really a bit of an art.
It's a mix of a science and an art, I should say.
And the reason it's a NOT is because while cleaning
the data, you want to make sure you
don't lose anything of value.
It's easy to say, hey, let's just
get rid of everything that doesn't make sense.
That's problematic.
And you might throw out something
important at the same time as you're cleaning the stuff out.
So it's a bit of an art and a science.
So we should keep that in mind as we go through this process
here.
So the first thing we want to do is
what do we do with this JFK, unknown, et cetera?
Ideally, we should probably keep JFK.
The reason is that JFK is John F Kennedy National Airport.
It's a well recognized entity.
So we should probably keep it and maybe
give it a dummy zip code or something like that
and keep it in our database.
But for simplicity, I want to throw it out.
But that's one of the considerations
that you should think about.
So what you're going to do is anything that we decide is bad,
we're going to throw the entire record out.
OK.
We're going to say, we don't want that record there at all.
And that may not be the right thing to do.
Maybe we should convert them to NaNs and keep those records.
But for simplicity, we're just going to do that.
Keep that in mind.
Then, now, we want to make sure that everything
is in the same format.
And we're going to convert everything as a zip.
So we'll convert everything into strings.
The idea of converting to strings is that for one thing
it'll keep a zero in front.
So it doesn't matter in our case because New York
City doesn't have any zip codes with zero in the front.
But, still, just for, I guess, for the future, we'll just say,
all right, zip codes are strings.
So we'll keep them as strings.
And we've got to decide what to do with the missing values
and the NaNs.
So what we're going to do is we're
going to take all the bad data and make them NaNs.
And then, we're going to make sure
that everything is a string, and it's
a proper integer like 1, 2, 1, 1, 1, or something like that.
And then we'll decide what to do with the missing values.
The NaNS, we make a decision about that.
And the decision we're going to make is we just throw them out.
So--
And one other thing we'll do is for now
is we'll also drop all zips that are less than 10,000
and greater than 19,999.
OK.
The reason for that is that New York City Zip's are all
within this range.
And we're going to assume that for now, we
don't care about any incident that
is recorded that is in a zip code that is not in New York
City.
End of transcript. Skip to the start.
  Previous